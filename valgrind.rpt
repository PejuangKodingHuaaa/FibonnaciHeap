==224== Memcheck, a memory error detector
==224== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==224== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==224== Command: ./test.out
==224== Parent PID: 12
==224== 
==224== Conditional jump or move depends on uninitialised value(s)
==224==    at 0x4A7622C: log@@GLIBC_2.29 (w_log_template.c:32)
==224==    by 0x10A285: __gnu_cxx::__enable_if<std::__is_integer<int>::__value, double>::__type std::log<int>(int) (in /root/bahaya/test.out)
==224==    by 0x1097C2: FibonacciHeap::Consolidate(node*) (in /root/bahaya/test.out)
==224==    by 0x10978B: FibonacciHeap::Extract_Min(node*) (in /root/bahaya/test.out)
==224==    by 0x10A113: main (in /root/bahaya/test.out)
==224== 
==224== Conditional jump or move depends on uninitialised value(s)
==224==    at 0x4AB5FCC: __ieee754_log_fma (e_log.c:61)
==224==    by 0x10A285: __gnu_cxx::__enable_if<std::__is_integer<int>::__value, double>::__type std::log<int>(int) (in /root/bahaya/test.out)
==224==    by 0x1097C2: FibonacciHeap::Consolidate(node*) (in /root/bahaya/test.out)
==224==    by 0x10978B: FibonacciHeap::Extract_Min(node*) (in /root/bahaya/test.out)
==224==    by 0x10A113: main (in /root/bahaya/test.out)
==224== 
==224== Conditional jump or move depends on uninitialised value(s)
==224==    at 0x4AB5FDB: __ieee754_log_fma (e_log.c:85)
==224==    by 0x10A285: __gnu_cxx::__enable_if<std::__is_integer<int>::__value, double>::__type std::log<int>(int) (in /root/bahaya/test.out)
==224==    by 0x1097C2: FibonacciHeap::Consolidate(node*) (in /root/bahaya/test.out)
==224==    by 0x10978B: FibonacciHeap::Extract_Min(node*) (in /root/bahaya/test.out)
==224==    by 0x10A113: main (in /root/bahaya/test.out)
==224== 
==224== Use of uninitialised value of size 8
==224==    at 0x4AB604B: __ieee754_log_fma (e_log.c:114)
==224==    by 0x10A285: __gnu_cxx::__enable_if<std::__is_integer<int>::__value, double>::__type std::log<int>(int) (in /root/bahaya/test.out)
==224==    by 0x1097C2: FibonacciHeap::Consolidate(node*) (in /root/bahaya/test.out)
==224==    by 0x10978B: FibonacciHeap::Extract_Min(node*) (in /root/bahaya/test.out)
==224==    by 0x10A113: main (in /root/bahaya/test.out)
==224== 
==224== Conditional jump or move depends on uninitialised value(s)
==224==    at 0x109806: FibonacciHeap::Consolidate(node*) (in /root/bahaya/test.out)
==224==    by 0x10978B: FibonacciHeap::Extract_Min(node*) (in /root/bahaya/test.out)
==224==    by 0x10A113: main (in /root/bahaya/test.out)
==224== 
==224== Conditional jump or move depends on uninitialised value(s)
==224==    at 0x483C530: operator new[](unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==224==    by 0x109813: FibonacciHeap::Consolidate(node*) (in /root/bahaya/test.out)
==224==    by 0x10978B: FibonacciHeap::Extract_Min(node*) (in /root/bahaya/test.out)
==224==    by 0x10A113: main (in /root/bahaya/test.out)
==224== 
==224== Conditional jump or move depends on uninitialised value(s)
==224==    at 0x10982C: FibonacciHeap::Consolidate(node*) (in /root/bahaya/test.out)
==224==    by 0x10978B: FibonacciHeap::Extract_Min(node*) (in /root/bahaya/test.out)
==224==    by 0x10A113: main (in /root/bahaya/test.out)
==224== 
==224== Conditional jump or move depends on uninitialised value(s)
==224==    at 0x10998B: FibonacciHeap::Consolidate(node*) (in /root/bahaya/test.out)
==224==    by 0x10978B: FibonacciHeap::Extract_Min(node*) (in /root/bahaya/test.out)
==224==    by 0x10A113: main (in /root/bahaya/test.out)
==224== 
==224== Mismatched free() / delete / delete []
==224==    at 0x483D1CF: operator delete(void*, unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==224==    by 0x109BB7: FibonacciHeap::Consolidate(node*) (in /root/bahaya/test.out)
==224==    by 0x10978B: FibonacciHeap::Extract_Min(node*) (in /root/bahaya/test.out)
==224==    by 0x10A113: main (in /root/bahaya/test.out)
==224==  Address 0x4da8280 is 0 bytes inside a block of size 16 alloc'd
==224==    at 0x483C583: operator new[](unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==224==    by 0x109813: FibonacciHeap::Consolidate(node*) (in /root/bahaya/test.out)
==224==    by 0x10978B: FibonacciHeap::Extract_Min(node*) (in /root/bahaya/test.out)
==224==    by 0x10A113: main (in /root/bahaya/test.out)
==224== 
==224== Stack overflow in thread #1: can't grow stack to 0x1ffe801000
==224== 
==224== Process terminating with default action of signal 11 (SIGSEGV)
==224==  Access not within mapped region at address 0x1FFE801FF8
==224== Stack overflow in thread #1: can't grow stack to 0x1ffe801000
==224==    at 0x109E8A: FibonacciHeap::Find(node*, int) (in /root/bahaya/test.out)
==224==  If you believe this happened as a result of a stack
==224==  overflow in your program's main thread (unlikely but
==224==  possible), you can try to increase the size of the
==224==  main thread stack using the --main-stacksize= flag.
==224==  The main thread stack size used in this run was 8388608.
==224== Stack overflow in thread #1: can't grow stack to 0x1ffe801000
==224== 
==224== Process terminating with default action of signal 11 (SIGSEGV)
==224==  Access not within mapped region at address 0x1FFE801FD8
==224== Stack overflow in thread #1: can't grow stack to 0x1ffe801000
==224==    at 0x4831134: _vgnU_freeres (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so)
==224==  If you believe this happened as a result of a stack
==224==  overflow in your program's main thread (unlikely but
==224==  possible), you can try to increase the size of the
==224==  main thread stack using the --main-stacksize= flag.
==224==  The main thread stack size used in this run was 8388608.
==224== 
==224== HEAP SUMMARY:
==224==     in use at exit: 73,920 bytes in 6 blocks
==224==   total heap usage: 7 allocs, 1 frees, 73,936 bytes allocated
==224== 
==224== LEAK SUMMARY:
==224==    definitely lost: 0 bytes in 0 blocks
==224==    indirectly lost: 0 bytes in 0 blocks
==224==      possibly lost: 0 bytes in 0 blocks
==224==    still reachable: 73,920 bytes in 6 blocks
==224==         suppressed: 0 bytes in 0 blocks
==224== Reachable blocks (those to which a pointer was found) are not shown.
==224== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==224== 
==224== Use --track-origins=yes to see where uninitialised values come from
==224== For lists of detected and suppressed errors, rerun with: -s
==224== ERROR SUMMARY: 13 errors from 9 contexts (suppressed: 0 from 0)
